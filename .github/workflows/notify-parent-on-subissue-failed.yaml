name: Notify Parent Issue Slack Thread on Subissue Failure

on:
  issues:
    types: [labeled]

jobs:
  notify-parent-on-failed-subissue:
    runs-on: ubuntu-latest
    steps:
      - name: Check for parent issue and Slack thread
        id: find_parent
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Check if the label is 'aemy-failed'
            if (!context.payload.label || context.payload.label.name !== 'aemy-failed') {
              console.log('Label is not aemy-failed, skipping.');
              return;
            }

            // 2. Extract parent issue number from the body
            const body = context.payload.issue.body || '';
            const match = body.match(/Parent issue: #([0-9]+)/);
            if (!match) {
              console.log('No parent issue number found in body.');
              return;
            }
            const parentIssueNumber = Number(match[1]);
            console.log('Parent issue number:', parentIssueNumber);

            // 3. Get Slack thread_ts from parent issue comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentIssueNumber,
            });
            const threadComment = comments.data.reverse().find(c => c.body.startsWith('Slack thread_ts: '));
            if (!threadComment) {
              console.log('No Slack thread_ts found in parent issue comments.');
              return;
            }
            const thread_ts = threadComment.body.replace('Slack thread_ts: ', '').trim();

            // 4. Gather subissue details
            const subissueTitle = context.payload.issue.title;
            const subissueBody = context.payload.issue.body || '';
            const subissueUrl = context.payload.issue.html_url;

            // 5. Check for PR reference in the body (e.g., PR: #123)
            let prCommentText = '';
            const prMatch = subissueBody.match(/PR: #([0-9]+)/i);
            if (prMatch) {
              const prNumber = Number(prMatch[1]);
              try {
                const prComments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                });
                if (prComments.data.length > 0) {
                  const lastPrComment = prComments.data[prComments.data.length - 1];
                  prCommentText = `*Last PR comment (#${prNumber}):*\n${lastPrComment.body}`;
                } else {
                  prCommentText = `*PR #${prNumber} has no comments.*`;
                }
              } catch (e) {
                prCommentText = `*Could not fetch comments for PR #${prNumber}*`;
              }
            }

            // 6. Build the Slack message
            let slackMessage = `*Subissue failed:*\n*Title:* ${subissueTitle}\n*URL:* ${subissueUrl}\n*Body:*\n${subissueBody}`;
            if (prCommentText) {
              slackMessage += `\n\n${prCommentText}`;
            }

            // 7. Output for use in Slack step
            core.setOutput('parent_thread_ts', thread_ts);
            core.setOutput('parent_issue_url', `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${parentIssueNumber}`);
            core.setOutput('slack_message', slackMessage);
      - name: Notify parent issue Slack thread
        if: steps.find_parent.outputs.parent_thread_ts != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: ${{ toJson({ "text": steps.find_parent.outputs.slack_message, "thread_ts": steps.find_parent.outputs.parent_thread_ts }) }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 